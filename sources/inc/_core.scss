:root {
    --font: #{$font-family};
    --default-font-color: #{$default-font-color};
    --border-color: #{$gray-300};
    @if $use-theme-colors {
        --focus-shadow: #{rgba(desaturate($primary,10%),.25)};
        --light-primary: #{tint-color($primary,15%)};
        --dark-primary: #{shade-color($primary,15%)};
        @each $name, $color in $main-colors {
            --#{$name}: #{$color};
        }
        @each $name, $color in $theme-colors {
            --#{$name}: #{$color};
        }
    }
}

html, body {
    color : var(--default-font-color);
    font-family: var(--font);
    margin: 0;
    scroll-behavior: smooth;
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

// Container
.container, .container-fluid {
    padding: 0 $container-padding;
    margin: 0 auto;
}

.grid {
    display: grid;
    grid-auto-columns: 1fr;
    grid-template-rows: min-content;
    grid-template-columns: repeat($nb_columns, 1fr);
    & > * {
        grid-column: 1 / -1;
    }
}

@for $i from 1 through 5 {
    .g-#{$i}, .gx-#{$i} {
        column-gap: map-get($gutters , $i );
    }
    .g-#{$i}, .gy-#{$i} {
        row-gap: map-get($gutters , $i );
    }
    @if 1 < $i {
        .row-#{$i} {
            grid-row: auto / span $i;
        }
    }
}

@for $i from 1 through $nb_columns {
    .col-#{$i} {
        grid-column: auto / span $i;
    }
    .grid .start-#{$i} {
        grid-column-start: $i;
    }
}

@each $breakpoint, $size in $grid-breakpoints {
    @media screen and (min-width:#{$size}){
        .container {
            max-width: $size*$container-width-coef;
        }
        @for $i from 1 through $nb_columns {
            .col-#{$breakpoint}-#{$i} {
                grid-column: auto / span $i;
            }
            .grid .start-#{$breakpoint}-#{$i} {
                grid-column-start: $i;
            }
        }
        @for $i from 2 through 5 {
            .row-#{$breakpoint}-#{$i} {
                grid-row: auto / span $i;
            }
        }
    }
}