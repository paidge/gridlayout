* {
    box-sizing: border-box;
    font-family: $font-family;
}

a {
    text-decoration: $link-decoration;
    color: $link-color;
    transition: $link-transition;
    &:hover {
        color: $link-hover-color;
        text-decoration: $link-hover-decoration;
    }
}

// Container
.container, .container-fluid {
    padding: 0 $padding-grid;
    margin: 0 auto;
}

// Grid
.d-block {display: block;}
.d-inline-block {display: inline-block;}
.d-flex {display: flex;}
.d-grid {display: grid;}

[class*="grid-"] {
    display: grid;
    grid-auto-columns: 1fr;
    grid-template-rows: min-content;
    grid-template-columns: repeat(1, 1fr);
    border-radius: $border-radius;
    column-gap: $gap-x;
    row-gap: $gap-y;
    & > * {
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        padding: $padding-col;
        border-radius: $border-radius;
    }
}

aside[class*="col"] {
    padding: 0;
}

$width: $autogrid-min-width;
@while $width <= $autogrid-max-width {
    $i: $width/1px;
    .autogrid-#{$i} {
        grid-template-columns: repeat(auto-fill, minmax($width, 1fr));
    }
    $width: $width+$autogrid-steps;
}

@for $i from 1 through $nb_columns_max {
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
    }
    @if $i > 1 {
        .row-#{$i} {
            grid-row: auto / span $i;
        }
        .col-#{$i} {
            grid-column: auto / span $i;
        }    
        [class*="grid-"] > .start-#{$i} {
            grid-column-start: $i;
        }
    }
}

// Responsive
@each $grid-breakpoint, $size in $grid-breakpoints {
    @media screen and (min-width:#{$size}) {
        .container {
            max-width: $size*$container_width_coef;
        }
        @for $i from 1 through $nb_columns_max {
            .grid-#{$grid-breakpoint}-#{$i} {
                grid-template-columns: repeat($i, 1fr);
            }
            .col-#{$grid-breakpoint}-#{$i} {
                grid-column: auto / span $i;
            }
            [class*="grid-"] > .start-#{$grid-breakpoint}-#{$i} {
                grid-column-start: $i;
            }
        }
    }
}

// Gutters and rounded helpers
@for $i from 0 through 5 {
    .g-#{$i}, .gx-#{$i} {
        column-gap: map-get($gutters , $i );
    }
    .g-#{$i}, .gy-#{$i} {
        row-gap: map-get($gutters , $i );
    }
    body *.rounded-#{$i}, .rounded-#{$i} * {
        border-radius: map-get($rounds, $i);
    }
}
body *.rounded-circle, .rounded-circle * {border-radius: 50%;}