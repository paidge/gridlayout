* {
    box-sizing: border-box;
    font-family: $font-family;
}

a {
    text-decoration: none;
    color: $color-link;
    &:hover {
        color: darken($color-link,15%);
        text-decoration: underline;
    }
}

// Container
.container, .container-fluid {
    padding: 0 $padding-grid;
    margin: 0 auto;
}

// Grid
.d-block {display: block;}
.d-inline-block {display: inline-block;}
.d-flex {display: flex;}
.d-grid {display: grid;}

[class*="grid-"] {
    display: grid;
    grid-template-rows: min-content;
    border-radius: $border-radius;
    column-gap: $gap-x;
    row-gap: $gap-y;
}

*[class^="grid-"], *[class*=" grid-"] {
    grid-template-columns: repeat(1, 1fr);
    & > * {
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        &:first-child {
            grid-column-start: 1;
            grid-row-start: 1;
        }
    }
}

*[class*="col-"] {
    padding: $padding-col;
    border-radius: $border-radius;
    grid-column: 1 / -1;
}

aside[class*="col-"] {
    padding: 0;
}

@for $i from 1 through $nb_columns_max {
    .autogrid-#{$i*100} {
        grid-template-columns: repeat(auto-fill, minmax($i*100px, 1fr));
    }
    @if $i < $nb_columns_max {
        $j: ($i*100)+$autogrid-steps;
        .autogrid-#{$j} {
            grid-template-columns: repeat(auto-fill, minmax($j*1px, 1fr));
        }
    }
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
    }
    .col-#{$i} {
        grid-column: auto / span $i;
    }
    *[class*="grid-"] > .start-#{$i} {
        grid-column-start: $i;
    }
}

// Responsive
@each $grid-breakpoint, $size in $grid-breakpoints {
    @media screen and (min-width:#{$size}) {
        .container {
            max-width: $size*$container_width_coef;
        }
        @for $i from 1 through $nb_columns_max {
            .grid-#{$grid-breakpoint}-#{$i} {
                grid-template-columns: repeat($i, 1fr);
            }
            .col-#{$grid-breakpoint}-#{$i} {
                grid-column: auto / span $i;
            }
            *[class*="grid-"] > .start-#{$grid-breakpoint}-#{$i} {
                grid-column-start: $i;
            }
        }
    }
}

// Gutters and rounded helpers
@for $i from 0 through 5 {
    .g-#{$i}, .gx-#{$i} {
        column-gap: map-get($gutters , $i );
    }
    .g-#{$i}, .gy-#{$i} {
        row-gap: map-get($gutters , $i );
    }
    body *.rounded-#{$i}, .rounded-#{$i} * {
        border-radius: map-get($gutters, $i);
    }
}
body *.rounded-circle, .rounded-circle * {border-radius: 50%;}